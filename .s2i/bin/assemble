#!/bin/bash -e
#
# S2I assemble script for the 'springboot-s2i' image.
# The 'assemble' script builds your application source ready to run.
#
# For more information refer to the documentation:
# https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

[ "$SCRIPT_DEBUG" = "true" ] && { set -x ; printenv ; }

export S2I_SOURCE_DIR=/tmp/src
export OLD_S2I_PATH=/usr/local/s2i

# If a gradle.build is present, this is a Gradle build scenario
function gradle_s2i_build() {
  if [ -f "$S2I_SOURCE_DIR/build.gradle" ]; then
    echo "Building with gradle. $S2I_SOURCE_DIR/build.gradle found."

    pushd $S2I_SOURCE_DIR &> /dev/null

    if [ -z "$BUILDER_ARGS" ]; then
      export BUILDER_ARGS="build -x test"
    fi

    echo "Found gradle.build ... attempting to build with 'gradle -s ${BUILDER_ARGS}'"

    echo "Gradle version:"
    gradle --version

    # Execute the actual build
    gradle -s $BUILDER_ARGS

    ERR=$?
    if [ $ERR -ne 0 ]; then
      echo "Aborting due to error code $ERR from Gradle build"
      exit $ERR
    fi

    # Copy built artifacts (if any!) from the build/libs directory
    # to the $DEPLOY_DIR directory for later deployment
    cd build/libs ; find . -type f -not -iname '*-plain*' -exec cp '{}' '/deployments/{}' ';'; cd ../..
    echo "files in /deployments"
    ls -al /deployments/*

    # clean up after maven
    gradle clean
    popd &> /dev/null
  fi
}

###### original assemble
set -e

source "${JBOSS_CONTAINER_UTIL_LOGGING_MODULE}/logging.sh"
source "${JBOSS_CONTAINER_MAVEN_S2I_MODULE}/maven-s2i"

# include our s2i_core_*() overrides/extensions
source "${JBOSS_CONTAINER_JAVA_S2I_MODULE}/s2i-core-hooks"

# inject our overridden maven_s2i_*() functions
source "${JBOSS_CONTAINER_JAVA_S2I_MODULE}/maven-s2i-overrides"

# modify
if [ -f "${S2I_SOURCE_DIR}/build.gradle" ]; then
    gradle_s2i_build
elif [ -f "${S2I_SOURCE_DIR}/pom.xml" ]; then
    # invoke the build
    maven_s2i_build
fi

# invoke the build
#maven_s2i_build
